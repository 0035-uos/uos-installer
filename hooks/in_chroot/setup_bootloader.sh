#!/bin/bash

EFI=false
DEVICE=""


error() {
  local msg="$@"
  echo " "
  echo "!! Error: ${msg}" >&2
  echo " "
}

# Check whether current platform is loongson or not.
is_loongson() {
  case $(uname -m) in
    loongson | mips* | loongarch64)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

is_loongarch() {
  case $(uname -m) in
    loongarch64)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}


# Check whether current platform is sw or not.
is_sw() {
  case $(uname -m) in
    sw*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

# Check whether current platform is x86/x86_64 or not.
is_x86() {
  case $(uname -m) in
    i386 | i686 | amd64 | x86 | x86_64)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

# Check whether current platform is arm64 or not.
is_arm64() {
  case $(uname -m) in
    arm64 | aarch64)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

install_package() {
#  DEBIAN_FRONTEND="noninteractive" apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --no-install-recommends --allow-unauthenticated install $@
  for i in $@;
  do
    DEBIAN_FRONTEND="noninteractive" apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --no-install-recommends --allow-unauthenticated install $i
    if [ $? -eq 0 ]; then
      echo "succeed"
    else
      error "Install Failed : $i"
    fi
  done
}

#检查参数
check_opts(){
  if [ $# -ge 1 ] && [ -b "$1" ];then
    echo "$@"
  else
    echo "need device!!!"
    exit 1
  fi
}

check_dep(){
  if [ -f "$(which grub-install)" ] && [ -f "$(which update-grub)" ];then
    echo "depends check pass..."
  else
    echo "depends check error!!!!"
    exit 2
  fi

}

# Check boot mode is UEFI or not.
check_efi_mode(){
    [ -d "/sys/firmware/efi" ] && declare -g EFI=true
    # 允许接收一个参数来强制指定使用efi
    [ ! -z "$1" ] && declare -g EFI=$1
}




update_grub_conf(){
  cat >> /etc/default/grub << EOF
# Generated by deepin-installer
GRUB_BACKGROUND="/boot/grub/themes/deepin/background.png"
GRUB_CMDLINE_LINUX_DEFAULT="console=tty splash quiet"
GRUB_DEFAULT=0
GRUB_DISTRIBUTOR="\`/usr/bin/lsb_release -d -s 2>/dev/null || echo UOS 20\`"
GRUB_THEME="/boot/grub/themes/deepin/theme.txt"
GRUB_TIMEOUT=3
GRUB_GFXMODE=auto
DEEPIN_GFXMODE_DETECT=1
EOF
}


add_start_option() {
    local arch_info=$@
    local bootloader_id="deepin"

    ## 基础启动项,默认UOS
    grub-install $arch_info --efi-directory=/boot/efi --bootloader-id="${bootloader_id}" --recheck \
        || error "grub-install failed with $arch_info" "${bootloader_id}"


    [ -d /boot/efi/EFI/boot ] || mkdir -p /boot/efi/EFI/boot
    cp -vf /boot/efi/EFI/${bootloader_id}/grub* /boot/efi/EFI/boot/

    # 32bit机型默认的efi引导文件
    fallback_efi=/boot/efi/EFI/boot/bootia32.efi
    fallback_efi_bak="${fallback_efi}-$(date +%s).bak"
    [ -f "${fallback_efi}" ] && cp "${fallback_efi?>}" "${fallback_efi_bak}"
    # Override fallback efi with shim.
    cp -vf /boot/efi/EFI/${bootloader_id}/shim*.efi "${fallback_efi}"

    # x86的64bit机型默认的efi引导文件
    if is_x86; then
        fallback_efi=/boot/efi/EFI/boot/bootx64.efi
        fallback_efi_bak="${fallback_efi}-$(date +%s).bak"
        [ -f "${fallback_efi}" ] && cp "${fallback_efi}" "${fallback_efi_bak}"
        # Override fallback efi with shim.
        cp -vf /boot/efi/EFI/${bootloader_id}/shim*.efi "${fallback_efi}"
    fi

    # arm64的64bit机型默认的efi引导文件
    if is_arm64; then
        fallback_efi=/boot/efi/EFI/boot/bootaa64.efi
        fallback_efi_bak="${fallback_efi}-$(date +%s).bak"
        [ -f "${fallback_efi}" ] && cp "${fallback_efi}" "${fallback_efi_bak}"
        # Override fallback efi with shim.
        if ls /boot/efi/EFI/${bootloader_id}/shim* 1>/dev/null 2>&1; then
            cp -vf /boot/efi/EFI/${bootloader_id}/shim*.efi "${fallback_efi}"
        else
            cp -vf /boot/efi/EFI/${bootloader_id}/grubaa64.efi "${fallback_efi}"
        fi
    fi
}

install_x86_grub(){
    # grub-install "$DEVICE"
    if [ "$EFI" == "true" ];then
      if [ x$(cat /sys/firmware/efi/fw_platform_size 2>/dev/null) = 'x32' ]; then
      install_package grub-efi-ia32
      add_start_option --target=i386-efi --efi-directory=/boot/efi

      else
        install_package shim-signed grub-efi-amd64-signed efibootmgr
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
        rm /sys/firmware/efi/efivars/dump-*
        add_start_option --target=x86_64-efi --uefi-secure-boot
        umount /sys/firmware/efi/efivars
        # grub-install --target=x86_64-efi --efi-directory=/boot/efi  --bootloader-id="deepin" --recheck
      fi
    else
        install_package grub-pc
        grub-install --no-floppy "$DEVICE" --target=i386-pc --force 
    fi
}


install_arm_grub(){
  if [ "$EFI" == "true" ];then
    if [ x$(cat /sys/firmware/efi/fw_platform_size 2>/dev/null) = 'x32' ]; then
      install_package grub-efi-arm
      add_start_option --target=arm-efi  --recheck # 增加系统启动选项

    else
      # Clover efi loader cannot use grub.efi correctly,
      # so we may patch grub or use grub.efi.signed.
      #install_package shim-signed grub-efi-amd64-signed efibootmgr
      install_package efibootmgr grub-efi-arm64 grub-efi-arm64-bin
      add_start_option --target=arm64-efi --uefi-secure-boot  --recheck # 增加系统启动选项
    fi
  fi
}

choice_arch(){
  if is_x86;then
    install_x86_grub
  elif is_arm64;then
    install_arm_grub
  fi
}

main(){
    check_opts "$@"
    DEVICE=$1
    check_efi_mode "$2"
    choice_arch
    update_grub_conf
    update-grub
}

main "$@"